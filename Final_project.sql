use stackoverflow 
go
--1. Amount of users and their parameters over time
select YEAR(creation_date) reg_year, MONTH(creation_date) reg_month, count(*) as 'amount', AVG(reputation) Average_reputation, MAX(reputation) Max_reputation, MIN(reputation) as Min_reputation
from users
group by YEAR(creation_date), MONTH(creation_date)
HAVING YEAR(creation_date) >= '2018' AND MONTH(creation_date) >= '01' 
order by YEAR(creation_date), MONTH(creation_date)

--2. Amount of posts and their parameters over time
select YEAR(creation_date) post_year, MONTH(creation_date) post_month, COUNT(*) amount_of_new_posts, AVG(score) AVG_REP, MAX(score) MAX_REP, MIN(score) MIN_REP
from posts
group by YEAR(creation_date), MONTH(creation_date) 
order by post_year, post_month
--3. Finding amount of posts created by new users
select YEAR(users.creation_date), MONTH(users.creation_date), COUNT(*) amount_of_new_posts_by_new_users, AVG(score) AVG_POST_REP, MAX(score) MAX_POST_REP, MIN(score) MIN_POST_REP
from users
join posts
on users.id = posts.owner_user_id
where users.creation_date > '2018-01-01'
group by YEAR(users.creation_date), MONTH(users.creation_date)
order by YEAR(users.creation_date), MONTH(users.creation_date)
--4. Amount of posts generated by users respectively to amount of months they stay active on platform
select YEAR(users.creation_date) user_year, MONTH(users.creation_date) user_month, 
YEAR(posts.creation_date) post_year, MONTH(posts.creation_date) post_month, COUNT(*)
from users
join posts
on users.id = posts.owner_user_id
where users.creation_date > '2018-01-01'
group by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(posts.creation_date), MONTH(posts.creation_date)
order by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(posts.creation_date), MONTH(posts.creation_date)
--5. Amount of answers and their parameters
select YEAR(creation_date) a_year, MONTH(creation_date) a_month, COUNT(*) amount_of_new_answers, AVG(score), MAX(score), MIN(score)
from answers
group by YEAR(creation_date), MONTH(creation_date) 
order by a_year, a_month
--6. Amount of answers generated by users respectively to amount of months they stay active on platform
select YEAR(users.creation_date) user_year, MONTH(users.creation_date) user_month, 
YEAR(answers.creation_date) answers_year, MONTH(answers.creation_date) answers_month, COUNT(*)
from users
join answers
on users.id = answers.owner_user_id
where users.creation_date > '2018-01-01'
group by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(answers.creation_date), MONTH(answers.creation_date)
order by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(answers.creation_date), MONTH(answers.creation_date)
--7. Gathering all information together and calculating trends by comparing with previous month
WITH posts_statistics as (
select YEAR(users.creation_date) user_year, MONTH(users.creation_date) user_month, 
YEAR(posts.creation_date) post_year, MONTH(posts.creation_date) post_month, COUNT(*) posts_amount
from users
join posts
on users.id = posts.owner_user_id
where users.creation_date > '2018-01-01'
group by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(posts.creation_date), MONTH(posts.creation_date) ),
answer_statistics as (
select YEAR(users.creation_date) user_year, MONTH(users.creation_date) user_month, 
YEAR(answers.creation_date) answers_year, MONTH(answers.creation_date) answers_month, COUNT(*) answers_amount
from users
join answers
on users.id = answers.owner_user_id
where users.creation_date > '2018-01-01'
group by YEAR(users.creation_date), MONTH(users.creation_date), YEAR(answers.creation_date), MONTH(answers.creation_date) )
select str(posts_statistics.user_year)+'-'+str(posts_statistics.user_month) AS 'JOINED_AT',
str(posts_statistics.post_year)+'-'+str(posts_statistics.post_month) AS 'THEIR_MONTH',
posts_statistics.posts_amount,
posts_statistics.posts_amount - lag(posts_statistics.posts_amount) over (order by posts_statistics.user_year, posts_statistics.user_month, posts_statistics.post_year, posts_statistics.post_month) 'posts_diff',
answer_statistics.answers_amount, 
answer_statistics.answers_amount - lag(answer_statistics.answers_amount) over (order by posts_statistics.user_year, posts_statistics.user_month, posts_statistics.post_year, posts_statistics.post_month) 'answers_diff',
posts_statistics.posts_amount + answer_statistics.answers_amount ' TOTAL_ACTIONS'
from posts_statistics
join answer_statistics
on posts_statistics.user_year = answer_statistics.user_year and posts_statistics.user_month = answer_statistics.user_month
and posts_statistics.post_year = answer_statistics.answers_year and posts_statistics.post_month = answer_statistics.answers_month
order by posts_statistics.user_year, posts_statistics.user_month, posts_statistics.post_year, posts_statistics.post_month