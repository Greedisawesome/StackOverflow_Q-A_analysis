USE stackoverflow 
GO
--all user-related queries are limited to Jan'18 according to limitations of downloaded part of original database(StackOverflow publicly available on Google BigQuery public datasets).
--1. Getting general information about amount of users registered and their parameters over time
SELECT YEAR(creation_date) reg_year, MONTH(creation_date) reg_month, count(*) users_amount, AVG(reputation) avg_rep, MAX(reputation) max_rep, MIN(reputation) min_rep
FROM users
GROUP BY YEAR(creation_date), MONTH(creation_date)
HAVING YEAR(creation_date) >= '2018' AND MONTH(creation_date) >= '01' 
ORDER BY reg_year, reg_month
;
--2. Same for posts information
SELECT YEAR(creation_date) post_year, MONTH(creation_date) post_month, COUNT(*) posts_amount, AVG(score) avg_rep, MAX(score) max_rep, MIN(score) min_rep
FROM posts
GROUP BY YEAR(creation_date), MONTH(creation_date) 
ORDER BY post_year, post_month
;
--3. Same for answers information
SELECT YEAR(creation_date) a_year, MONTH(creation_date) a_month, COUNT(*) amount_of_new_answers, AVG(score), MAX(score), MIN(score)
FROM answers
GROUP BY YEAR(creation_date), MONTH(creation_date) 
ORDER BY a_year, a_month
;
--4. Finding amount of posts created by new users
SELECT YEAR(users.creation_date) user_reg_year, MONTH(users.creation_date) user_reg_month, COUNT(*) amount_of_new_posts_by_new_users, 
	   AVG(score) avg_post_rep, MAX(score) max_post_rep, MIN(score) min_post_rep
FROM users
JOIN posts
ON users.id = posts.owner_user_id
WHERE users.creation_date > '2018-01-01'
GROUP BY YEAR(users.creation_date), MONTH(users.creation_date)
ORDER BY user_reg_year, user_reg_month
;
--5. Creating VIEW for future use. View contains data about amount of posts generated by users respectively to month they stay active on platform
CREATE VIEW Posts_statistics
AS
SELECT YEAR(users.creation_date) user_reg_year, MONTH(users.creation_date) user_reg_month, 
YEAR(posts.creation_date) post_crt_year, MONTH(posts.creation_date) post_crt_month, COUNT(*) posts_amount
FROM users
JOIN posts
ON users.id = posts.owner_user_id
WHERE users.creation_date > '2018-01-01'
GROUP BY YEAR(users.creation_date), MONTH(users.creation_date), YEAR(posts.creation_date), MONTH(posts.creation_date)
GO
;
--6. Creating VIEW for future use. View contains data about amount of answers generated by users respectively to month they stay active on platform
CREATE VIEW Answer_statistics
AS
SELECT YEAR(users.creation_date) user_reg_year, MONTH(users.creation_date) user_reg_month, 
YEAR(answers.creation_date) answers_crt_year, MONTH(answers.creation_date) answers_crt_month, COUNT(*) answers_amount
FROM users
JOIN answers
ON users.id = answers.owner_user_id
WHERE users.creation_date > '2018-01-01'
GROUP BY YEAR(users.creation_date), MONTH(users.creation_date), YEAR(answers.creation_date), MONTH(answers.creation_date)
GO
;
--7. Gathering all information together and calculating trends by comparing with previous month data
SELECT str(Posts_statistics.user_reg_year)+'-'+str(Posts_statistics.user_reg_month) JOINED_AT,
str(Posts_statistics.post_crt_year)+'-'+str(Posts_statistics.post_crt_month) THEIR_MONTH,
Posts_statistics.posts_amount,
Posts_statistics.posts_amount - lag(Posts_statistics.posts_amount) OVER (ORDER BY Posts_statistics.user_reg_year, Posts_statistics.user_reg_month, Posts_statistics.post_crt_year, Posts_statistics.post_crt_month) 'posts_diff',
Answer_statistics.answers_amount, 
Answer_statistics.answers_amount - lag(Answer_statistics.answers_amount) OVER (ORDER BY Posts_statistics.user_reg_year, Posts_statistics.user_reg_month, Posts_statistics.post_crt_year, Posts_statistics.post_crt_month) 'answers_diff',
Posts_statistics.posts_amount + Answer_statistics.answers_amount TOTAL_ACTIONS
FROM Posts_statistics
JOIN Answer_statistics
ON Posts_statistics.user_reg_year = Answer_statistics.user_reg_year and Posts_statistics.user_reg_month = Answer_statistics.user_reg_month
AND Posts_statistics.post_crt_year = Answer_statistics.answers_crt_year and Posts_statistics.post_crt_month = Answer_statistics.answers_crt_month
ORDER BY JOINED_AT, THEIR_MONTH
